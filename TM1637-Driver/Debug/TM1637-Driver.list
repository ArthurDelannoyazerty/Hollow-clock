
TM1637-Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001cb8  08001cb8  00011cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce8  08001ce8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001ce8  08001ce8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ce8  08001ce8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ce8  08001ce8  00011ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  08001d00  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001d00  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069c4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c6  00000000  00000000  000269fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00027dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  000284e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fd6  00000000  00000000  00028b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089cd  00000000  00000000  0003eb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e1dd  00000000  00000000  0004752b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c18  00000000  00000000  000c575c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ca0 	.word	0x08001ca0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001ca0 	.word	0x08001ca0

0800014c <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8000150:	2201      	movs	r2, #1
 8000152:	2108      	movs	r1, #8
 8000154:	4807      	ldr	r0, [pc, #28]	; (8000174 <tm1637_CLKhigh+0x28>)
 8000156:	f001 f814 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2108      	movs	r1, #8
 800015e:	4805      	ldr	r0, [pc, #20]	; (8000174 <tm1637_CLKhigh+0x28>)
 8000160:	f001 f80f 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	2108      	movs	r1, #8
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <tm1637_CLKhigh+0x28>)
 800016a:	f001 f80a 	bl	8001182 <HAL_GPIO_WritePin>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40010c00 	.word	0x40010c00

08000178 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 800017c:	2200      	movs	r2, #0
 800017e:	2108      	movs	r1, #8
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <tm1637_CLKlow+0x28>)
 8000182:	f000 fffe 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	2108      	movs	r1, #8
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <tm1637_CLKlow+0x28>)
 800018c:	f000 fff9 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	2108      	movs	r1, #8
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <tm1637_CLKlow+0x28>)
 8000196:	f000 fff4 	bl	8001182 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 80001a8:	2201      	movs	r2, #1
 80001aa:	2120      	movs	r1, #32
 80001ac:	4807      	ldr	r0, [pc, #28]	; (80001cc <tm1637_SDOhigh+0x28>)
 80001ae:	f000 ffe8 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	2120      	movs	r1, #32
 80001b6:	4805      	ldr	r0, [pc, #20]	; (80001cc <tm1637_SDOhigh+0x28>)
 80001b8:	f000 ffe3 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	2120      	movs	r1, #32
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <tm1637_SDOhigh+0x28>)
 80001c2:	f000 ffde 	bl	8001182 <HAL_GPIO_WritePin>
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 80001d4:	2200      	movs	r2, #0
 80001d6:	2120      	movs	r1, #32
 80001d8:	4807      	ldr	r0, [pc, #28]	; (80001f8 <tm1637_SDOlow+0x28>)
 80001da:	f000 ffd2 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2120      	movs	r1, #32
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <tm1637_SDOlow+0x28>)
 80001e4:	f000 ffcd 	bl	8001182 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2120      	movs	r1, #32
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <tm1637_SDOlow+0x28>)
 80001ee:	f000 ffc8 	bl	8001182 <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010c00 	.word	0x40010c00

080001fc <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8000200:	f7ff ffa4 	bl	800014c <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8000204:	f7ff ffce 	bl	80001a4 <tm1637_SDOhigh>
	tm1637_SDOlow();
 8000208:	f7ff ffe2 	bl	80001d0 <tm1637_SDOlow>

	tm1637_CLKlow();
 800020c:	f7ff ffb4 	bl	8000178 <tm1637_CLKlow>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}

08000214 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 8000218:	f7ff ffae 	bl	8000178 <tm1637_CLKlow>
	tm1637_SDOlow();
 800021c:	f7ff ffd8 	bl	80001d0 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8000220:	f7ff ff94 	bl	800014c <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8000224:	f7ff ffbe 	bl	80001a4 <tm1637_SDOhigh>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]
 8000238:	e015      	b.n	8000266 <tm1637_DataOut+0x3a>
	{
		tm1637_CLKlow();
 800023a:	f7ff ff9d 	bl	8000178 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 800023e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d102      	bne.n	8000252 <tm1637_DataOut+0x26>
		{
			tm1637_SDOhigh();
 800024c:	f7ff ffaa 	bl	80001a4 <tm1637_SDOhigh>
 8000250:	e001      	b.n	8000256 <tm1637_DataOut+0x2a>

		}
		else
		{
			tm1637_SDOlow();
 8000252:	f7ff ffbd 	bl	80001d0 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 8000256:	f7ff ff79 	bl	800014c <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800025a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	3301      	adds	r3, #1
 8000262:	b2db      	uxtb	r3, r3
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800026a:	2b07      	cmp	r3, #7
 800026c:	dde5      	ble.n	800023a <tm1637_DataOut+0xe>
	} 
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	2300      	movs	r3, #0
 8000286:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000288:	2300      	movs	r3, #0
 800028a:	75fb      	strb	r3, [r7, #23]
 800028c:	e015      	b.n	80002ba <tm1637_TxCommand+0x42>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	461a      	mov	r2, r3
 8000294:	7dfb      	ldrb	r3, [r7, #23]
 8000296:	fa42 f303 	asr.w	r3, r2, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	bf14      	ite	ne
 80002a2:	2301      	movne	r3, #1
 80002a4:	2300      	moveq	r3, #0
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	7dfb      	ldrb	r3, [r7, #23]
 80002aa:	f107 0118 	add.w	r1, r7, #24
 80002ae:	440b      	add	r3, r1
 80002b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	3301      	adds	r3, #1
 80002b8:	75fb      	strb	r3, [r7, #23]
 80002ba:	7dfb      	ldrb	r3, [r7, #23]
 80002bc:	2b07      	cmp	r3, #7
 80002be:	d9e6      	bls.n	800028e <tm1637_TxCommand+0x16>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 80002c0:	f7ff ff9c 	bl	80001fc <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 80002c4:	f107 030c 	add.w	r3, r7, #12
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ffaf 	bl	800022c <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 80002ce:	f7ff ff53 	bl	8000178 <tm1637_CLKlow>
	tm1637_CLKhigh();
 80002d2:	f7ff ff3b 	bl	800014c <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 80002d6:	f000 f87f 	bl	80003d8 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80002e2:	2bc0      	cmp	r3, #192	; 0xc0
 80002e4:	d001      	beq.n	80002ea <tm1637_TxCommand+0x72>
	{
		tm1637_EndPacket();
 80002e6:	f7ff ff95 	bl	8000214 <tm1637_EndPacket>
	}

}
 80002ea:	bf00      	nop
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b086      	sub	sp, #24
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	460b      	mov	r3, r1
 80002fc:	70fb      	strb	r3, [r7, #3]
	uint8_t ByteData[8] = {0};
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PacketSize; i++)
 8000306:	2300      	movs	r3, #0
 8000308:	75fb      	strb	r3, [r7, #23]
 800030a:	e02b      	b.n	8000364 <tm1637_TxData+0x72>
	{
		for(uint8_t j = 0; j < 8; j++)
 800030c:	2300      	movs	r3, #0
 800030e:	75bb      	strb	r3, [r7, #22]
 8000310:	e017      	b.n	8000342 <tm1637_TxData+0x50>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8000312:	7dfb      	ldrb	r3, [r7, #23]
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	7dbb      	ldrb	r3, [r7, #22]
 800031e:	fa42 f303 	asr.w	r3, r2, r3
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	bf14      	ite	ne
 800032a:	2301      	movne	r3, #1
 800032c:	2300      	moveq	r3, #0
 800032e:	b2da      	uxtb	r2, r3
 8000330:	7dbb      	ldrb	r3, [r7, #22]
 8000332:	f107 0118 	add.w	r1, r7, #24
 8000336:	440b      	add	r3, r1
 8000338:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t j = 0; j < 8; j++)
 800033c:	7dbb      	ldrb	r3, [r7, #22]
 800033e:	3301      	adds	r3, #1
 8000340:	75bb      	strb	r3, [r7, #22]
 8000342:	7dbb      	ldrb	r3, [r7, #22]
 8000344:	2b07      	cmp	r3, #7
 8000346:	d9e4      	bls.n	8000312 <tm1637_TxData+0x20>
		}
		tm1637_DataOut(ByteData);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff6d 	bl	800022c <tm1637_DataOut>
		tm1637_CLKlow();
 8000352:	f7ff ff11 	bl	8000178 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8000356:	f7ff fef9 	bl	800014c <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 800035a:	f000 f83d 	bl	80003d8 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	3301      	adds	r3, #1
 8000362:	75fb      	strb	r3, [r7, #23]
 8000364:	7dfa      	ldrb	r2, [r7, #23]
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	429a      	cmp	r2, r3
 800036a:	d3cf      	bcc.n	800030c <tm1637_TxData+0x1a>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 800036c:	f7ff ff52 	bl	8000214 <tm1637_EndPacket>


}
 8000370:	bf00      	nop
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = SCLK_Pin;
 8000390:	2308      	movs	r3, #8
 8000392:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2302      	movs	r3, #2
 800039a:	617b      	str	r3, [r7, #20]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00a      	beq.n	80003b8 <tm1637_Initialize+0x40>
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d111      	bne.n	80003ca <tm1637_Initialize+0x52>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	4619      	mov	r1, r3
 80003b0:	4808      	ldr	r0, [pc, #32]	; (80003d4 <tm1637_Initialize+0x5c>)
 80003b2:	f000 fd4b 	bl	8000e4c <HAL_GPIO_Init>
			break;
 80003b6:	e008      	b.n	80003ca <tm1637_Initialize+0x52>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003bc:	f107 0308 	add.w	r3, r7, #8
 80003c0:	4619      	mov	r1, r3
 80003c2:	4804      	ldr	r0, [pc, #16]	; (80003d4 <tm1637_Initialize+0x5c>)
 80003c4:	f000 fd42 	bl	8000e4c <HAL_GPIO_Init>
			break;
 80003c8:	bf00      	nop

	}

}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40011400 	.word	0x40011400

080003d8 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 80003dc:	2001      	movs	r0, #1
 80003de:	f7ff ffcb 	bl	8000378 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 80003e2:	f7ff fec9 	bl	8000178 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80003e6:	e002      	b.n	80003ee <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ffc5 	bl	8000378 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80003ee:	2108      	movs	r1, #8
 80003f0:	4804      	ldr	r0, [pc, #16]	; (8000404 <tm1637_ACKcheck+0x2c>)
 80003f2:	f000 feaf 	bl	8001154 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d1f5      	bne.n	80003e8 <tm1637_ACKcheck+0x10>
}
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010c00 	.word	0x40010c00

08000408 <tm1637_DisplayClear>:
void tm1637_DisplayClear()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
	uint8_t EmptyBuffer[4] = {0};
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
	uint8_t CommandCarrier[1] = {0};
 8000412:	2300      	movs	r3, #0
 8000414:	703b      	strb	r3, [r7, #0]
	CommandCarrier[0] = DATA_SET;									//Send set data command
 8000416:	2340      	movs	r3, #64	; 0x40
 8000418:	703b      	strb	r3, [r7, #0]
	tm1637_TxCommand(CommandCarrier);
 800041a:	463b      	mov	r3, r7
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff2b 	bl	8000278 <tm1637_TxCommand>
	CommandCarrier[0] = C0H;										//Set address
 8000422:	23c0      	movs	r3, #192	; 0xc0
 8000424:	703b      	strb	r3, [r7, #0]
	tm1637_TxCommand(CommandCarrier);
 8000426:	463b      	mov	r3, r7
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff25 	bl	8000278 <tm1637_TxCommand>
	tm1637_TxData(EmptyBuffer, 4);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2104      	movs	r1, #4
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff5d 	bl	80002f2 <tm1637_TxData>
	CommandCarrier[0] = DISPLAY_OFF;
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	703b      	strb	r3, [r7, #0]
	tm1637_TxCommand(CommandCarrier);
 800043c:	463b      	mov	r3, r7
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff1a 	bl	8000278 <tm1637_TxCommand>
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <tm1637_DisplayHandle>:
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	6039      	str	r1, [r7, #0]
 8000456:	71fb      	strb	r3, [r7, #7]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8000458:	2300      	movs	r3, #0
 800045a:	733b      	strb	r3, [r7, #12]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 800045c:	2301      	movs	r3, #1
 800045e:	73fb      	strb	r3, [r7, #15]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	2b07      	cmp	r3, #7
 8000464:	d819      	bhi.n	800049a <tm1637_DisplayHandle+0x4e>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8000466:	2340      	movs	r3, #64	; 0x40
 8000468:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff02 	bl	8000278 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8000474:	23c0      	movs	r3, #192	; 0xc0
 8000476:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fefb 	bl	8000278 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 8000482:	2104      	movs	r1, #4
 8000484:	6838      	ldr	r0, [r7, #0]
 8000486:	f7ff ff34 	bl	80002f2 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f809 	bl	80004a4 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8000492:	2300      	movs	r3, #0
 8000494:	73fb      	strb	r3, [r7, #15]
		return ParameterFalidation;
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	e000      	b.n	800049c <tm1637_DisplayHandle+0x50>
	}
	return ParameterFalidation;
 800049a:	7bfb      	ldrb	r3, [r7, #15]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	uint8_t BrighnessBuffer[8] = {0};
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	75bb      	strb	r3, [r7, #22]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d830      	bhi.n	8000522 <tm1637_SetBrighness+0x7e>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	f063 0377 	orn	r3, r3, #119	; 0x77
 80004c6:	71fb      	strb	r3, [r7, #7]

		for(uint8_t i = 0; i < 8; i++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	75fb      	strb	r3, [r7, #23]
 80004cc:	e013      	b.n	80004f6 <tm1637_SetBrighness+0x52>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 80004ce:	79fa      	ldrb	r2, [r7, #7]
 80004d0:	7dfb      	ldrb	r3, [r7, #23]
 80004d2:	fa42 f303 	asr.w	r3, r2, r3
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	bf14      	ite	ne
 80004de:	2301      	movne	r3, #1
 80004e0:	2300      	moveq	r3, #0
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	7dfb      	ldrb	r3, [r7, #23]
 80004e6:	f107 0118 	add.w	r1, r7, #24
 80004ea:	440b      	add	r3, r1
 80004ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < 8; i++)
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	3301      	adds	r3, #1
 80004f4:	75fb      	strb	r3, [r7, #23]
 80004f6:	7dfb      	ldrb	r3, [r7, #23]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	d9e8      	bls.n	80004ce <tm1637_SetBrighness+0x2a>
		}
		tm1637_StartPacket();
 80004fc:	f7ff fe7e 	bl	80001fc <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe91 	bl	800022c <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 800050a:	f7ff fe35 	bl	8000178 <tm1637_CLKlow>
		tm1637_CLKhigh();
 800050e:	f7ff fe1d 	bl	800014c <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8000512:	f7ff ff61 	bl	80003d8 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8000516:	f7ff fe7d 	bl	8000214 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	75bb      	strb	r3, [r7, #22]
		return ParameterFalidation;
 800051e:	7dbb      	ldrb	r3, [r7, #22]
 8000520:	e000      	b.n	8000524 <tm1637_SetBrighness+0x80>
	}
	return ParameterFalidation;
 8000522:	7dbb      	ldrb	r3, [r7, #22]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <char2segments>:
		  }

	  }
}

uint8_t char2segments(char c) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
        switch (c) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	3b20      	subs	r3, #32
 800053a:	2b5a      	cmp	r3, #90	; 0x5a
 800053c:	f200 811a 	bhi.w	8000774 <char2segments+0x248>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <char2segments+0x1c>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	080006ed 	.word	0x080006ed
 800054c:	08000775 	.word	0x08000775
 8000550:	08000775 	.word	0x08000775
 8000554:	08000775 	.word	0x08000775
 8000558:	08000775 	.word	0x08000775
 800055c:	08000775 	.word	0x08000775
 8000560:	08000775 	.word	0x08000775
 8000564:	08000775 	.word	0x08000775
 8000568:	08000775 	.word	0x08000775
 800056c:	08000775 	.word	0x08000775
 8000570:	080006e9 	.word	0x080006e9
 8000574:	08000775 	.word	0x08000775
 8000578:	08000775 	.word	0x08000775
 800057c:	080006e5 	.word	0x080006e5
 8000580:	08000775 	.word	0x08000775
 8000584:	08000775 	.word	0x08000775
 8000588:	080006b5 	.word	0x080006b5
 800058c:	080006b9 	.word	0x080006b9
 8000590:	080006bd 	.word	0x080006bd
 8000594:	080006c1 	.word	0x080006c1
 8000598:	080006c5 	.word	0x080006c5
 800059c:	080006c9 	.word	0x080006c9
 80005a0:	080006cd 	.word	0x080006cd
 80005a4:	080006d1 	.word	0x080006d1
 80005a8:	080006d5 	.word	0x080006d5
 80005ac:	080006d9 	.word	0x080006d9
 80005b0:	08000775 	.word	0x08000775
 80005b4:	08000775 	.word	0x08000775
 80005b8:	08000775 	.word	0x08000775
 80005bc:	08000775 	.word	0x08000775
 80005c0:	08000775 	.word	0x08000775
 80005c4:	08000775 	.word	0x08000775
 80005c8:	08000775 	.word	0x08000775
 80005cc:	080006f1 	.word	0x080006f1
 80005d0:	080006f9 	.word	0x080006f9
 80005d4:	080006fd 	.word	0x080006fd
 80005d8:	08000705 	.word	0x08000705
 80005dc:	08000709 	.word	0x08000709
 80005e0:	0800070d 	.word	0x0800070d
 80005e4:	08000711 	.word	0x08000711
 80005e8:	08000715 	.word	0x08000715
 80005ec:	0800071d 	.word	0x0800071d
 80005f0:	08000725 	.word	0x08000725
 80005f4:	0800072d 	.word	0x0800072d
 80005f8:	08000731 	.word	0x08000731
 80005fc:	08000735 	.word	0x08000735
 8000600:	08000739 	.word	0x08000739
 8000604:	0800073d 	.word	0x0800073d
 8000608:	08000741 	.word	0x08000741
 800060c:	08000745 	.word	0x08000745
 8000610:	0800074d 	.word	0x0800074d
 8000614:	08000751 	.word	0x08000751
 8000618:	08000755 	.word	0x08000755
 800061c:	08000759 	.word	0x08000759
 8000620:	0800075d 	.word	0x0800075d
 8000624:	08000761 	.word	0x08000761
 8000628:	08000769 	.word	0x08000769
 800062c:	0800076d 	.word	0x0800076d
 8000630:	08000771 	.word	0x08000771
 8000634:	08000775 	.word	0x08000775
 8000638:	08000775 	.word	0x08000775
 800063c:	08000775 	.word	0x08000775
 8000640:	080006e1 	.word	0x080006e1
 8000644:	080006dd 	.word	0x080006dd
 8000648:	08000775 	.word	0x08000775
 800064c:	080006f5 	.word	0x080006f5
 8000650:	080006f9 	.word	0x080006f9
 8000654:	08000701 	.word	0x08000701
 8000658:	08000705 	.word	0x08000705
 800065c:	08000709 	.word	0x08000709
 8000660:	0800070d 	.word	0x0800070d
 8000664:	08000711 	.word	0x08000711
 8000668:	08000719 	.word	0x08000719
 800066c:	08000721 	.word	0x08000721
 8000670:	08000729 	.word	0x08000729
 8000674:	0800072d 	.word	0x0800072d
 8000678:	08000731 	.word	0x08000731
 800067c:	08000735 	.word	0x08000735
 8000680:	08000739 	.word	0x08000739
 8000684:	0800073d 	.word	0x0800073d
 8000688:	08000741 	.word	0x08000741
 800068c:	08000749 	.word	0x08000749
 8000690:	0800074d 	.word	0x0800074d
 8000694:	08000751 	.word	0x08000751
 8000698:	08000755 	.word	0x08000755
 800069c:	08000759 	.word	0x08000759
 80006a0:	0800075d 	.word	0x0800075d
 80006a4:	08000765 	.word	0x08000765
 80006a8:	08000769 	.word	0x08000769
 80006ac:	0800076d 	.word	0x0800076d
 80006b0:	08000771 	.word	0x08000771
			case '0' : return 0x3f;
 80006b4:	233f      	movs	r3, #63	; 0x3f
 80006b6:	e05e      	b.n	8000776 <char2segments+0x24a>
			case '1' : return 0x06;
 80006b8:	2306      	movs	r3, #6
 80006ba:	e05c      	b.n	8000776 <char2segments+0x24a>
			case '2' : return 0x5b;
 80006bc:	235b      	movs	r3, #91	; 0x5b
 80006be:	e05a      	b.n	8000776 <char2segments+0x24a>
			case '3' : return 0x4f;
 80006c0:	234f      	movs	r3, #79	; 0x4f
 80006c2:	e058      	b.n	8000776 <char2segments+0x24a>
			case '4' : return 0x66;
 80006c4:	2366      	movs	r3, #102	; 0x66
 80006c6:	e056      	b.n	8000776 <char2segments+0x24a>
			case '5' : return 0x6d;
 80006c8:	236d      	movs	r3, #109	; 0x6d
 80006ca:	e054      	b.n	8000776 <char2segments+0x24a>
			case '6' : return 0x7d;
 80006cc:	237d      	movs	r3, #125	; 0x7d
 80006ce:	e052      	b.n	8000776 <char2segments+0x24a>
			case '7' : return 0x07;
 80006d0:	2307      	movs	r3, #7
 80006d2:	e050      	b.n	8000776 <char2segments+0x24a>
			case '8' : return 0x7f;
 80006d4:	237f      	movs	r3, #127	; 0x7f
 80006d6:	e04e      	b.n	8000776 <char2segments+0x24a>
			case '9' : return 0x6f;
 80006d8:	236f      	movs	r3, #111	; 0x6f
 80006da:	e04c      	b.n	8000776 <char2segments+0x24a>
            case '_' : return 0x08;
 80006dc:	2308      	movs	r3, #8
 80006de:	e04a      	b.n	8000776 <char2segments+0x24a>
            case '^' : return 0x01; // ¯
 80006e0:	2301      	movs	r3, #1
 80006e2:	e048      	b.n	8000776 <char2segments+0x24a>
            case '-' : return 0x40;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	e046      	b.n	8000776 <char2segments+0x24a>
            case '*' : return 0x63; // °
 80006e8:	2363      	movs	r3, #99	; 0x63
 80006ea:	e044      	b.n	8000776 <char2segments+0x24a>
            case ' ' : return 0x00; // space
 80006ec:	2300      	movs	r3, #0
 80006ee:	e042      	b.n	8000776 <char2segments+0x24a>
            case 'A' : return 0x77; // upper case A
 80006f0:	2377      	movs	r3, #119	; 0x77
 80006f2:	e040      	b.n	8000776 <char2segments+0x24a>
            case 'a' : return 0x5f; // lower case a
 80006f4:	235f      	movs	r3, #95	; 0x5f
 80006f6:	e03e      	b.n	8000776 <char2segments+0x24a>
            case 'B' :              // lower case b
            case 'b' : return 0x7c; // lower case b
 80006f8:	237c      	movs	r3, #124	; 0x7c
 80006fa:	e03c      	b.n	8000776 <char2segments+0x24a>
            case 'C' : return 0x39; // upper case C
 80006fc:	2339      	movs	r3, #57	; 0x39
 80006fe:	e03a      	b.n	8000776 <char2segments+0x24a>
            case 'c' : return 0x58; // lower case c
 8000700:	2358      	movs	r3, #88	; 0x58
 8000702:	e038      	b.n	8000776 <char2segments+0x24a>
            case 'D' :              // lower case d
            case 'd' : return 0x5e; // lower case d
 8000704:	235e      	movs	r3, #94	; 0x5e
 8000706:	e036      	b.n	8000776 <char2segments+0x24a>
            case 'E' :              // upper case E
            case 'e' : return 0x79; // upper case E
 8000708:	2379      	movs	r3, #121	; 0x79
 800070a:	e034      	b.n	8000776 <char2segments+0x24a>
            case 'F' :              // upper case F
            case 'f' : return 0x71; // upper case F
 800070c:	2371      	movs	r3, #113	; 0x71
 800070e:	e032      	b.n	8000776 <char2segments+0x24a>
            case 'G' :              // upper case G
            case 'g' : return 0x35; // upper case G
 8000710:	2335      	movs	r3, #53	; 0x35
 8000712:	e030      	b.n	8000776 <char2segments+0x24a>
            case 'H' : return 0x76; // upper case H
 8000714:	2376      	movs	r3, #118	; 0x76
 8000716:	e02e      	b.n	8000776 <char2segments+0x24a>
            case 'h' : return 0x74; // lower case h
 8000718:	2374      	movs	r3, #116	; 0x74
 800071a:	e02c      	b.n	8000776 <char2segments+0x24a>
            case 'I' : return 0x06; // 1
 800071c:	2306      	movs	r3, #6
 800071e:	e02a      	b.n	8000776 <char2segments+0x24a>
            case 'i' : return 0x04; // lower case i
 8000720:	2304      	movs	r3, #4
 8000722:	e028      	b.n	8000776 <char2segments+0x24a>
            case 'J' : return 0x1e; // upper case J
 8000724:	231e      	movs	r3, #30
 8000726:	e026      	b.n	8000776 <char2segments+0x24a>
            case 'j' : return 0x16; // lower case j
 8000728:	2316      	movs	r3, #22
 800072a:	e024      	b.n	8000776 <char2segments+0x24a>
            case 'K' :              // upper case K
            case 'k' : return 0x75; // upper case K
 800072c:	2375      	movs	r3, #117	; 0x75
 800072e:	e022      	b.n	8000776 <char2segments+0x24a>
            case 'L' :              // upper case L
            case 'l' : return 0x38; // upper case L
 8000730:	2338      	movs	r3, #56	; 0x38
 8000732:	e020      	b.n	8000776 <char2segments+0x24a>
            case 'M' :              // twice tall n
            case 'm' : return 0x37; // twice tall ∩
 8000734:	2337      	movs	r3, #55	; 0x37
 8000736:	e01e      	b.n	8000776 <char2segments+0x24a>
            case 'N' :              // lower case n
            case 'n' : return 0x54; // lower case n
 8000738:	2354      	movs	r3, #84	; 0x54
 800073a:	e01c      	b.n	8000776 <char2segments+0x24a>
            case 'O' :              // lower case o
            case 'o' : return 0x5c; // lower case o
 800073c:	235c      	movs	r3, #92	; 0x5c
 800073e:	e01a      	b.n	8000776 <char2segments+0x24a>
            case 'P' :              // upper case P
            case 'p' : return 0x73; // upper case P
 8000740:	2373      	movs	r3, #115	; 0x73
 8000742:	e018      	b.n	8000776 <char2segments+0x24a>
            case 'Q' : return 0x7b; // upper case Q
 8000744:	237b      	movs	r3, #123	; 0x7b
 8000746:	e016      	b.n	8000776 <char2segments+0x24a>
            case 'q' : return 0x67; // lower case q
 8000748:	2367      	movs	r3, #103	; 0x67
 800074a:	e014      	b.n	8000776 <char2segments+0x24a>
            case 'R' :              // lower case r
            case 'r' : return 0x50; // lower case r
 800074c:	2350      	movs	r3, #80	; 0x50
 800074e:	e012      	b.n	8000776 <char2segments+0x24a>
            case 'S' :              // 5
            case 's' : return 0x6d; // 5
 8000750:	236d      	movs	r3, #109	; 0x6d
 8000752:	e010      	b.n	8000776 <char2segments+0x24a>
            case 'T' :              // lower case t
            case 't' : return 0x78; // lower case t
 8000754:	2378      	movs	r3, #120	; 0x78
 8000756:	e00e      	b.n	8000776 <char2segments+0x24a>
            case 'U' :              // lower case u
            case 'u' : return 0x1c; // lower case u
 8000758:	231c      	movs	r3, #28
 800075a:	e00c      	b.n	8000776 <char2segments+0x24a>
            case 'V' :              // twice tall u
            case 'v' : return 0x3e; // twice tall u
 800075c:	233e      	movs	r3, #62	; 0x3e
 800075e:	e00a      	b.n	8000776 <char2segments+0x24a>
            case 'W' : return 0x7e; // upside down A
 8000760:	237e      	movs	r3, #126	; 0x7e
 8000762:	e008      	b.n	8000776 <char2segments+0x24a>
            case 'w' : return 0x2a; // separated w
 8000764:	232a      	movs	r3, #42	; 0x2a
 8000766:	e006      	b.n	8000776 <char2segments+0x24a>
            case 'X' :              // upper case H
            case 'x' : return 0x76; // upper case H
 8000768:	2376      	movs	r3, #118	; 0x76
 800076a:	e004      	b.n	8000776 <char2segments+0x24a>
            case 'Y' :              // lower case y
            case 'y' : return 0x6e; // lower case y
 800076c:	236e      	movs	r3, #110	; 0x6e
 800076e:	e002      	b.n	8000776 <char2segments+0x24a>
            case 'Z' :              // separated Z
            case 'z' : return 0x1b; // separated Z
 8000770:	231b      	movs	r3, #27
 8000772:	e000      	b.n	8000776 <char2segments+0x24a>
        }
        return 0;
 8000774:	2300      	movs	r3, #0
    }
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //DP is connected to the second digit MSB
  tm1637_Segments[0] = A_SEG;
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <main+0xcc>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
  tm1637_Segments[1] = B_SEG;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <main+0xcc>)
 800078e:	2202      	movs	r2, #2
 8000790:	705a      	strb	r2, [r3, #1]
  tm1637_Segments[2] = C_SEG;
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <main+0xcc>)
 8000794:	2204      	movs	r2, #4
 8000796:	709a      	strb	r2, [r3, #2]
  tm1637_Segments[3] = D_SEG;
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <main+0xcc>)
 800079a:	2208      	movs	r2, #8
 800079c:	70da      	strb	r2, [r3, #3]
  tm1637_Segments[4] = E_SEG;
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <main+0xcc>)
 80007a0:	2210      	movs	r2, #16
 80007a2:	711a      	strb	r2, [r3, #4]
  tm1637_Segments[5] = F_SEG;
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <main+0xcc>)
 80007a6:	2220      	movs	r2, #32
 80007a8:	715a      	strb	r2, [r3, #5]
  tm1637_Segments[6] = G_SEG;
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <main+0xcc>)
 80007ac:	2240      	movs	r2, #64	; 0x40
 80007ae:	719a      	strb	r2, [r3, #6]
  tm1637_Segments[7] = DP_SEG;
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <main+0xcc>)
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 fa03 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f851 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 f8c3 	bl	8000948 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c2:	f000 f893 	bl	80008ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2108      	movs	r1, #8
 80007ca:	4821      	ldr	r0, [pc, #132]	; (8000850 <main+0xd0>)
 80007cc:	f000 fcd9 	bl	8001182 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2120      	movs	r1, #32
 80007d4:	481e      	ldr	r0, [pc, #120]	; (8000850 <main+0xd0>)
 80007d6:	f000 fcd4 	bl	8001182 <HAL_GPIO_WritePin>

  tm1637_DisplayHandle(4, CurrentDisplay);						//
 80007da:	491e      	ldr	r1, [pc, #120]	; (8000854 <main+0xd4>)
 80007dc:	2004      	movs	r0, #4
 80007de:	f7ff fe35 	bl	800044c <tm1637_DisplayHandle>

  Timer1Enable = ENABLE;										//Turn on systick based timer
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <main+0xd8>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */


  uint8_t texte[] = "1603"; //ex txt 16h03
 80007e8:	4a1c      	ldr	r2, [pc, #112]	; (800085c <main+0xdc>)
 80007ea:	463b      	mov	r3, r7
 80007ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	3304      	adds	r3, #4
 80007f4:	7019      	strb	r1, [r3, #0]
  for(uint8_t i=0; i<4;i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	e013      	b.n	8000824 <main+0xa4>
	  texte[i] = char2segments(texte[i]);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f107 0208 	add.w	r2, r7, #8
 8000802:	4413      	add	r3, r2
 8000804:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000808:	79fc      	ldrb	r4, [r7, #7]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fe8e 	bl	800052c <char2segments>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4423      	add	r3, r4
 800081a:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(uint8_t i=0; i<4;i++){
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	3301      	adds	r3, #1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b03      	cmp	r3, #3
 8000828:	d9e8      	bls.n	80007fc <main+0x7c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick() >= 10000)
 800082a:	f000 fa21 	bl	8000c70 <HAL_GetTick>
 800082e:	4603      	mov	r3, r0
 8000830:	f242 720f 	movw	r2, #9999	; 0x270f
 8000834:	4293      	cmp	r3, r2
 8000836:	d902      	bls.n	800083e <main+0xbe>
	  {
		  tm1637_DisplayClear();
 8000838:	f7ff fde6 	bl	8000408 <tm1637_DisplayClear>
 800083c:	e7f5      	b.n	800082a <main+0xaa>
	  }
	  else
	  {
		  tm1637_DisplayHandle(7, texte);
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	2007      	movs	r0, #7
 8000844:	f7ff fe02 	bl	800044c <tm1637_DisplayHandle>
	  if(HAL_GetTick() >= 10000)
 8000848:	e7ef      	b.n	800082a <main+0xaa>
 800084a:	bf00      	nop
 800084c:	20000034 	.word	0x20000034
 8000850:	40010c00 	.word	0x40010c00
 8000854:	20000030 	.word	0x20000030
 8000858:	20000000 	.word	0x20000000
 800085c:	08001cb8 	.word	0x08001cb8

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b090      	sub	sp, #64	; 0x40
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2228      	movs	r2, #40	; 0x28
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fa0e 	bl	8001c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800089e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fdc7 	bl	800143c <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008b4:	f000 f894 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 f832 	bl	800193c <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008de:	f000 f87f 	bl	80009e0 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3740      	adds	r7, #64	; 0x40
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C1_Init+0x50>)
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <MX_I2C1_Init+0x54>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C1_Init+0x50>)
 80008f8:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_I2C1_Init+0x58>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_I2C1_Init+0x50>)
 800090a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800090e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_I2C1_Init+0x50>)
 800092a:	f000 fc43 	bl	80011b4 <HAL_I2C_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000934:	f000 f854 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000003c 	.word	0x2000003c
 8000940:	40005400 	.word	0x40005400
 8000944:	000186a0 	.word	0x000186a0

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_GPIO_Init+0x90>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_GPIO_Init+0x90>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_GPIO_Init+0x90>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_GPIO_Init+0x90>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_GPIO_Init+0x90>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_GPIO_Init+0x90>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_GPIO_Init+0x90>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <MX_GPIO_Init+0x90>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_GPIO_Init+0x90>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|SCLK_Pin|SDO_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f640 0128 	movw	r1, #2088	; 0x828
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_GPIO_Init+0x94>)
 80009ac:	f000 fbe9 	bl	8001182 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|SCLK_Pin|SDO_Pin;
 80009b0:	f640 0328 	movw	r3, #2088	; 0x828
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2302      	movs	r3, #2
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0x94>)
 80009ca:	f000 fa3f 	bl	8000e4c <HAL_GPIO_Init>

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010c00 	.word	0x40010c00

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_MspInit+0x5c>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <HAL_MspInit+0x5c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x5c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_MspInit+0x60>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_MspInit+0x60>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000

08000a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_I2C_MspInit+0x90>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d132      	bne.n	8000ad6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8e:	2312      	movs	r3, #18
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <HAL_I2C_MspInit+0x98>)
 8000a9e:	f000 f9d5 	bl	8000e4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_I2C_MspInit+0x9c>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <HAL_I2C_MspInit+0x9c>)
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_I2C_MspInit+0x94>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010000 	.word	0x40010000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <HardFault_Handler+0x4>

08000b02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <BusFault_Handler+0x4>

08000b0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <UsageFault_Handler+0x4>

08000b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1Enable)
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SysTick_Handler+0x28>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d005      	beq.n	8000b50 <SysTick_Handler+0x18>
	{
		Timer1++;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <SysTick_Handler+0x2c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <SysTick_Handler+0x2c>)
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e002      	b.n	8000b56 <SysTick_Handler+0x1e>
	}
	else
	{
		Timer1 = 0;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SysTick_Handler+0x2c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f879 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	2000002c 	.word	0x2000002c

08000b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b76:	e003      	b.n	8000b80 <LoopCopyDataInit>

08000b78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b7e:	3104      	adds	r1, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b88:	d3f6      	bcc.n	8000b78 <CopyDataInit>
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b8c:	e002      	b.n	8000b94 <LoopFillZerobss>

08000b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b90:	f842 3b04 	str.w	r3, [r2], #4

08000b94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b98:	d3f9      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9a:	f7ff ffe5 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f001 f853 	bl	8001c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fded 	bl	8000780 <main>
  bx lr
 8000ba6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ba8:	08001cf0 	.word	0x08001cf0
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bb0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000bb4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000bb8:	20000094 	.word	0x20000094

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f907 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff ff06 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f911 	bl	8000e32 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f8e7 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000004 	.word	0x20000004
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000090 	.word	0x20000090

08000c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000090 	.word	0x20000090

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff90 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff49 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff5e 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff90 	bl	8000d3c <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5f 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb0 	bl	8000da0 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e169      	b.n	8001134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e60:	2201      	movs	r2, #1
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8158 	bne.w	800112e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4a9a      	ldr	r2, [pc, #616]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d05e      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e88:	4a98      	ldr	r2, [pc, #608]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d875      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e8e:	4a98      	ldr	r2, [pc, #608]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d058      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000e94:	4a96      	ldr	r2, [pc, #600]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d86f      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000e9a:	4a96      	ldr	r2, [pc, #600]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d052      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000ea0:	4a94      	ldr	r2, [pc, #592]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d869      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ea6:	4a94      	ldr	r2, [pc, #592]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04c      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eac:	4a92      	ldr	r2, [pc, #584]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d863      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000eb2:	4a92      	ldr	r2, [pc, #584]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d046      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a90      	ldr	r2, [pc, #576]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d85d      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d82a      	bhi.n	8000f18 <HAL_GPIO_Init+0xcc>
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	d859      	bhi.n	8000f7a <HAL_GPIO_Init+0x12e>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <HAL_GPIO_Init+0x80>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000f47 	.word	0x08000f47
 8000ed0:	08000f21 	.word	0x08000f21
 8000ed4:	08000f33 	.word	0x08000f33
 8000ed8:	08000f75 	.word	0x08000f75
 8000edc:	08000f7b 	.word	0x08000f7b
 8000ee0:	08000f7b 	.word	0x08000f7b
 8000ee4:	08000f7b 	.word	0x08000f7b
 8000ee8:	08000f7b 	.word	0x08000f7b
 8000eec:	08000f7b 	.word	0x08000f7b
 8000ef0:	08000f7b 	.word	0x08000f7b
 8000ef4:	08000f7b 	.word	0x08000f7b
 8000ef8:	08000f7b 	.word	0x08000f7b
 8000efc:	08000f7b 	.word	0x08000f7b
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f7b 	.word	0x08000f7b
 8000f08:	08000f7b 	.word	0x08000f7b
 8000f0c:	08000f7b 	.word	0x08000f7b
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f3d 	.word	0x08000f3d
 8000f18:	4a79      	ldr	r2, [pc, #484]	; (8001100 <HAL_GPIO_Init+0x2b4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1e:	e02c      	b.n	8000f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	623b      	str	r3, [r7, #32]
          break;
 8000f26:	e029      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e024      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	3308      	adds	r3, #8
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e01f      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	330c      	adds	r3, #12
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e01a      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	623b      	str	r3, [r7, #32]
          break;
 8000f52:	e013      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	611a      	str	r2, [r3, #16]
          break;
 8000f66:	e009      	b.n	8000f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	615a      	str	r2, [r3, #20]
          break;
 8000f72:	e003      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x130>
          break;
 8000f7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2bff      	cmp	r3, #255	; 0xff
 8000f80:	d801      	bhi.n	8000f86 <HAL_GPIO_Init+0x13a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	e001      	b.n	8000f8a <HAL_GPIO_Init+0x13e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2bff      	cmp	r3, #255	; 0xff
 8000f90:	d802      	bhi.n	8000f98 <HAL_GPIO_Init+0x14c>
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x152>
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	3b08      	subs	r3, #8
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	6a39      	ldr	r1, [r7, #32]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 80b1 	beq.w	800112e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fcc:	4b4d      	ldr	r3, [pc, #308]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x2b8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe4:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a40      	ldr	r2, [pc, #256]	; (800110c <HAL_GPIO_Init+0x2c0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d013      	beq.n	8001038 <HAL_GPIO_Init+0x1ec>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a3f      	ldr	r2, [pc, #252]	; (8001110 <HAL_GPIO_Init+0x2c4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d00d      	beq.n	8001034 <HAL_GPIO_Init+0x1e8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a3e      	ldr	r2, [pc, #248]	; (8001114 <HAL_GPIO_Init+0x2c8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d007      	beq.n	8001030 <HAL_GPIO_Init+0x1e4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a3d      	ldr	r2, [pc, #244]	; (8001118 <HAL_GPIO_Init+0x2cc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_GPIO_Init+0x1e0>
 8001028:	2303      	movs	r3, #3
 800102a:	e006      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 800102c:	2304      	movs	r3, #4
 800102e:	e004      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001030:	2302      	movs	r3, #2
 8001032:	e002      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_GPIO_Init+0x1ee>
 8001038:	2300      	movs	r3, #0
 800103a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103c:	f002 0203 	and.w	r2, r2, #3
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	4093      	lsls	r3, r2
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800104a:	492f      	ldr	r1, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x2bc>)
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_GPIO_Init+0x2d0>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	492c      	ldr	r1, [pc, #176]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_GPIO_Init+0x2d0>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	43db      	mvns	r3, r3
 800107a:	4928      	ldr	r1, [pc, #160]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800107c:	4013      	ands	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4922      	ldr	r1, [pc, #136]	; (800111c <HAL_GPIO_Init+0x2d0>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_GPIO_Init+0x2d0>)
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	491e      	ldr	r1, [pc, #120]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	4918      	ldr	r1, [pc, #96]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	608b      	str	r3, [r1, #8]
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4914      	ldr	r1, [pc, #80]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d021      	beq.n	8001120 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <HAL_GPIO_Init+0x2d0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60cb      	str	r3, [r1, #12]
 80010e8:	e021      	b.n	800112e <HAL_GPIO_Init+0x2e2>
 80010ea:	bf00      	nop
 80010ec:	10320000 	.word	0x10320000
 80010f0:	10310000 	.word	0x10310000
 80010f4:	10220000 	.word	0x10220000
 80010f8:	10210000 	.word	0x10210000
 80010fc:	10120000 	.word	0x10120000
 8001100:	10110000 	.word	0x10110000
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40011000 	.word	0x40011000
 8001118:	40011400 	.word	0x40011400
 800111c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	43db      	mvns	r3, r3
 8001128:	4909      	ldr	r1, [pc, #36]	; (8001150 <HAL_GPIO_Init+0x304>)
 800112a:	4013      	ands	r3, r2
 800112c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	3301      	adds	r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	fa22 f303 	lsr.w	r3, r2, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	f47f ae8e 	bne.w	8000e60 <HAL_GPIO_Init+0x14>
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	372c      	adds	r7, #44	; 0x2c
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e001      	b.n	8001176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]
 800118e:	4613      	mov	r3, r2
 8001190:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001192:	787b      	ldrb	r3, [r7, #1]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	041a      	lsls	r2, r3, #16
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	611a      	str	r2, [r3, #16]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e12b      	b.n	800141e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fc38 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2224      	movs	r2, #36	; 0x24
 80011e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001218:	f000 fce4 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4a81      	ldr	r2, [pc, #516]	; (8001428 <HAL_I2C_Init+0x274>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d807      	bhi.n	8001238 <HAL_I2C_Init+0x84>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a80      	ldr	r2, [pc, #512]	; (800142c <HAL_I2C_Init+0x278>)
 800122c:	4293      	cmp	r3, r2
 800122e:	bf94      	ite	ls
 8001230:	2301      	movls	r3, #1
 8001232:	2300      	movhi	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	e006      	b.n	8001246 <HAL_I2C_Init+0x92>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a7d      	ldr	r2, [pc, #500]	; (8001430 <HAL_I2C_Init+0x27c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	bf94      	ite	ls
 8001240:	2301      	movls	r3, #1
 8001242:	2300      	movhi	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0e7      	b.n	800141e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4a78      	ldr	r2, [pc, #480]	; (8001434 <HAL_I2C_Init+0x280>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a6a      	ldr	r2, [pc, #424]	; (8001428 <HAL_I2C_Init+0x274>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d802      	bhi.n	8001288 <HAL_I2C_Init+0xd4>
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	e009      	b.n	800129c <HAL_I2C_Init+0xe8>
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	4a69      	ldr	r2, [pc, #420]	; (8001438 <HAL_I2C_Init+0x284>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	3301      	adds	r3, #1
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	495c      	ldr	r1, [pc, #368]	; (8001428 <HAL_I2C_Init+0x274>)
 80012b8:	428b      	cmp	r3, r1
 80012ba:	d819      	bhi.n	80012f0 <HAL_I2C_Init+0x13c>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1e59      	subs	r1, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ca:	1c59      	adds	r1, r3, #1
 80012cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012d0:	400b      	ands	r3, r1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00a      	beq.n	80012ec <HAL_I2C_Init+0x138>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1e59      	subs	r1, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	e051      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e04f      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d111      	bne.n	800131c <HAL_I2C_Init+0x168>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1e58      	subs	r0, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	440b      	add	r3, r1
 8001306:	fbb0 f3f3 	udiv	r3, r0, r3
 800130a:	3301      	adds	r3, #1
 800130c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	e012      	b.n	8001342 <HAL_I2C_Init+0x18e>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1e58      	subs	r0, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	0099      	lsls	r1, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Init+0x196>
 8001346:	2301      	movs	r3, #1
 8001348:	e022      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10e      	bne.n	8001370 <HAL_I2C_Init+0x1bc>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1e58      	subs	r0, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6859      	ldr	r1, [r3, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	440b      	add	r3, r1
 8001360:	fbb0 f3f3 	udiv	r3, r0, r3
 8001364:	3301      	adds	r3, #1
 8001366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136e:	e00f      	b.n	8001390 <HAL_I2C_Init+0x1dc>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e58      	subs	r0, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	0099      	lsls	r1, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	fbb0 f3f3 	udiv	r3, r0, r3
 8001386:	3301      	adds	r3, #1
 8001388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	6809      	ldr	r1, [r1, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6911      	ldr	r1, [r2, #16]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68d2      	ldr	r2, [r2, #12]
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	000186a0 	.word	0x000186a0
 800142c:	001e847f 	.word	0x001e847f
 8001430:	003d08ff 	.word	0x003d08ff
 8001434:	431bde83 	.word	0x431bde83
 8001438:	10624dd3 	.word	0x10624dd3

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e26c      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8087 	beq.w	800156a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145c:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b04      	cmp	r3, #4
 8001466:	d00c      	beq.n	8001482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d112      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
 8001474:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b89      	ldr	r3, [pc, #548]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06c      	beq.n	8001568 <HAL_RCC_OscConfig+0x12c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d168      	bne.n	8001568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e246      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x76>
 80014a4:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a7f      	ldr	r2, [pc, #508]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e02e      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7a      	ldr	r2, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0xbc>
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a71      	ldr	r2, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6a      	ldr	r2, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a67      	ldr	r2, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fbaa 	bl	8000c70 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fba6 	bl	8000c70 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1fa      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xe4>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb96 	bl	8000c70 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fb92 	bl	8000c70 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1e6      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x10c>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001576:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1ba      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4939      	ldr	r1, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb4b 	bl	8000c70 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fb47 	bl	8000c70 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e19b      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4927      	ldr	r1, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb2a 	bl	8000c70 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fb26 	bl	8000c70 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e17a      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03a      	beq.n	80016c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff fb0a 	bl	8000c70 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fb06 	bl	8000c70 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e15a      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f000 fac4 	bl	8001c0c <RCC_Delay>
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff faf0 	bl	8000c70 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001692:	e00f      	b.n	80016b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff faec 	bl	8000c70 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d908      	bls.n	80016b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e140      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	42420000 	.word	0x42420000
 80016b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b9e      	ldr	r3, [pc, #632]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e9      	bne.n	8001694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a6 	beq.w	800181a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d2:	4b97      	ldr	r3, [pc, #604]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b94      	ldr	r3, [pc, #592]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a93      	ldr	r2, [pc, #588]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b91      	ldr	r3, [pc, #580]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b8e      	ldr	r3, [pc, #568]	; (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a8a      	ldr	r2, [pc, #552]	; (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff faad 	bl	8000c70 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff faa9 	bl	8000c70 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	; 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e0fd      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b81      	ldr	r3, [pc, #516]	; (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x312>
 8001740:	4b7b      	ldr	r3, [pc, #492]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a7a      	ldr	r2, [pc, #488]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e02d      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x334>
 8001756:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a75      	ldr	r2, [pc, #468]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a72      	ldr	r2, [pc, #456]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e01c      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x356>
 8001778:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4a6c      	ldr	r2, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6213      	str	r3, [r2, #32]
 8001784:	4b6a      	ldr	r3, [pc, #424]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a69      	ldr	r2, [pc, #420]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6213      	str	r3, [r2, #32]
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001792:	4b67      	ldr	r3, [pc, #412]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a66      	ldr	r2, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	4b64      	ldr	r3, [pc, #400]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a63      	ldr	r2, [pc, #396]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d015      	beq.n	80017de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa5d 	bl	8000c70 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fa59 	bl	8000c70 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0ab      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	4b57      	ldr	r3, [pc, #348]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ee      	beq.n	80017ba <HAL_RCC_OscConfig+0x37e>
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fa47 	bl	8000c70 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fa43 	bl	8000c70 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e095      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ee      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8081 	beq.w	8001926 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d061      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d146      	bne.n	80018c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_OscConfig+0x4fc>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fa17 	bl	8000c70 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fa13 	bl	8000c70 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e067      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	492d      	ldr	r1, [pc, #180]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a19      	ldr	r1, [r3, #32]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	430b      	orrs	r3, r1
 8001892:	4927      	ldr	r1, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x4fc>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff f9e7 	bl	8000c70 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f9e3 	bl	8000c70 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e037      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46a>
 80018c4:	e02f      	b.n	8001926 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_RCC_OscConfig+0x4fc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff f9d0 	bl	8000c70 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f9cc 	bl	8000c70 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e020      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x498>
 80018f2:	e018      	b.n	8001926 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e013      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	429a      	cmp	r2, r3
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	40007000 	.word	0x40007000
 8001938:	42420060 	.word	0x42420060

0800193c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d0      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 0207 	bic.w	r2, r3, #7
 8001966:	4965      	ldr	r1, [pc, #404]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d040      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e073      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06b      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4936      	ldr	r1, [pc, #216]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f920 	bl	8000c70 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff f91c 	bl	8000c70 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e053      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d210      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 0207 	bic.w	r2, r3, #7
 8001a72:	4922      	ldr	r1, [pc, #136]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f87e 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08001cd0 	.word	0x08001cd0
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b490      	push	{r4, r7}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b18:	1d3c      	adds	r4, r7, #4
 8001b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b20:	f240 2301 	movw	r3, #513	; 0x201
 8001b24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x40>
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x46>
 8001b4e:	e02d      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b52:	623b      	str	r3, [r7, #32]
      break;
 8001b54:	e02d      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	0c9b      	lsrs	r3, r3, #18
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b62:	4413      	add	r3, r2
 8001b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c5b      	lsrs	r3, r3, #17
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b82:	4413      	add	r3, r2
 8001b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8e:	fb02 f203 	mul.w	r2, r2, r3
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	e004      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	623b      	str	r3, [r7, #32]
      break;
 8001baa:	e002      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bae:	623b      	str	r3, [r7, #32]
      break;
 8001bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc90      	pop	{r4, r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	08001cc0 	.word	0x08001cc0
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	007a1200 	.word	0x007a1200
 8001bcc:	003d0900 	.word	0x003d0900

08001bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001be8:	f7ff fff2 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08001ce0 	.word	0x08001ce0

08001c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <RCC_Delay+0x34>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <RCC_Delay+0x38>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0a5b      	lsrs	r3, r3, #9
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c28:	bf00      	nop
  }
  while (Delay --);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	60fa      	str	r2, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f9      	bne.n	8001c28 <RCC_Delay+0x1c>
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000004 	.word	0x20000004
 8001c44:	10624dd3 	.word	0x10624dd3

08001c48 <__libc_init_array>:
 8001c48:	b570      	push	{r4, r5, r6, lr}
 8001c4a:	2600      	movs	r6, #0
 8001c4c:	4d0c      	ldr	r5, [pc, #48]	; (8001c80 <__libc_init_array+0x38>)
 8001c4e:	4c0d      	ldr	r4, [pc, #52]	; (8001c84 <__libc_init_array+0x3c>)
 8001c50:	1b64      	subs	r4, r4, r5
 8001c52:	10a4      	asrs	r4, r4, #2
 8001c54:	42a6      	cmp	r6, r4
 8001c56:	d109      	bne.n	8001c6c <__libc_init_array+0x24>
 8001c58:	f000 f822 	bl	8001ca0 <_init>
 8001c5c:	2600      	movs	r6, #0
 8001c5e:	4d0a      	ldr	r5, [pc, #40]	; (8001c88 <__libc_init_array+0x40>)
 8001c60:	4c0a      	ldr	r4, [pc, #40]	; (8001c8c <__libc_init_array+0x44>)
 8001c62:	1b64      	subs	r4, r4, r5
 8001c64:	10a4      	asrs	r4, r4, #2
 8001c66:	42a6      	cmp	r6, r4
 8001c68:	d105      	bne.n	8001c76 <__libc_init_array+0x2e>
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
 8001c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c70:	4798      	blx	r3
 8001c72:	3601      	adds	r6, #1
 8001c74:	e7ee      	b.n	8001c54 <__libc_init_array+0xc>
 8001c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c7a:	4798      	blx	r3
 8001c7c:	3601      	adds	r6, #1
 8001c7e:	e7f2      	b.n	8001c66 <__libc_init_array+0x1e>
 8001c80:	08001ce8 	.word	0x08001ce8
 8001c84:	08001ce8 	.word	0x08001ce8
 8001c88:	08001ce8 	.word	0x08001ce8
 8001c8c:	08001cec 	.word	0x08001cec

08001c90 <memset>:
 8001c90:	4603      	mov	r3, r0
 8001c92:	4402      	add	r2, r0
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d100      	bne.n	8001c9a <memset+0xa>
 8001c98:	4770      	bx	lr
 8001c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c9e:	e7f9      	b.n	8001c94 <memset+0x4>

08001ca0 <_init>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr

08001cac <_fini>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	bf00      	nop
 8001cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb2:	bc08      	pop	{r3}
 8001cb4:	469e      	mov	lr, r3
 8001cb6:	4770      	bx	lr
